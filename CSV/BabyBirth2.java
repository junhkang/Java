package CSV;/** * Print out total number of babies born, as well as for each gender, in a given CSV file of baby name data. *  * @author Duke Software Team  */import java.io.File;import edu.duke.*;import org.apache.commons.csv.*;public class BabyBirth2 {    public void printNames () {        FileResource fr = new FileResource();        for (CSVRecord rec : fr.getCSVParser(false)) {            int numBorn = Integer.parseInt(rec.get(2));            if (numBorn <= 100) {                System.out.println("Name " + rec.get(0) +                           " Gender " + rec.get(1) +                           " Num Born " + rec.get(2));            }        }    }    public void totalBirths (FileResource fr) {        int totalBirths = 0;        int totalBoys = 0;        int totalGirls = 0;        for (CSVRecord rec : fr.getCSVParser(false)) {            int numBorn = Integer.parseInt(rec.get(2));            totalBirths += numBorn;            if (rec.get(1).equals("M")) {                totalBoys += numBorn;            }            else {                totalGirls += numBorn;            }        }        System.out.println("total births = " + totalBirths);        System.out.println("female girls = " + totalGirls);        System.out.println("male boys = " + totalBoys);    }    public void uniqueNames(FileResource fr)   {        int totalBirths = 0;        int uniboys = 0;        int unigirls =0;        for (CSVRecord rec : fr.getCSVParser(false)) {            int numBorn = Integer.parseInt(rec.get(2));            totalBirths += numBorn;            if (rec.get(1).equals("M")) {                uniboys += 1;            }            else {                unigirls += 1;            }        }        System.out.println("total births = " + totalBirths);        System.out.println("# of unique boys names = " + uniboys);        System.out.println("# of unique girls names = " + unigirls);    }    public void tests() {                                FileResource fr = new FileResource();        uniqueNames(fr);    }    public int getRank(int year, String name, String gender)   {        FileResource fr =            new FileResource("C:\\Users\\박정??\\Downloads\\Course2-Java-CSV\\us_babynames\\us_babynames_by_year\\yob"+year+".csv");            int Rank = 0;            int total =0;        for (CSVRecord rec : fr.getCSVParser(false)) {            String genders = rec.get(1);            if  (genders.equals(gender))    {                total += 1;            }        }        for (CSVRecord rec : fr.getCSVParser(false)) {            int numBorn = Integer.parseInt(rec.get(2));            String names = rec.get(0);            String genders = rec.get(1);            if (gender !="M" && gender !="F"){                System.out.println("Enter M or F for gender section");}                else                    if  (total == Rank)    {                        Rank = -1;                    }                    else{                    if  (genders.equals(gender))    {                        Rank += 1;                        if  (names.equals(name))    {                            break;                        }                    }                }                }                  return Rank;        }    public void getName(int year, int rank, String gender)   {        FileResource fr =            new FileResource("C:\\Users\\박정??\\Downloads\\Course2-Java-CSV\\us_babynames\\us_babynames_by_year\\yob"+year+".csv");            int Rank = 0;            int total =0;       for (CSVRecord rec : fr.getCSVParser(false)) {            String genders = rec.get(1);            if  (genders.equals(gender))    {                total += 1;            }        }        for (CSVRecord rec : fr.getCSVParser(false)) {            int numBorn = Integer.parseInt(rec.get(2));            String names = rec.get(0);            String genders = rec.get(1);            if (gender !="M" && gender !="F"){                System.out.println("Enter M or F for gender section");}                else                   if  (total == Rank)    {                        System.out.println("NO NAME");                        break;                    }                    else{                    if  (genders.equals(gender))    {                        Rank += 1;                        if  (Rank == rank)    {                            System.out.println(names);                            break;                        }                    }                }                }          }    public void whatIsNameInYear(int year, String name, int newyear, String gender)   {            FileResource fr =            new FileResource("C:\\Users\\박정??\\Downloads\\Course2-Java-CSV\\us_babynames\\us_babynames_by_year\\yob"+year+".csv");            FileResource newfr =            new FileResource("C:\\Users\\박정??\\Downloads\\Course2-Java-CSV\\us_babynames\\us_babynames_by_year\\yob"+newyear+".csv");            int Rank = 0;            int total =0;       for (CSVRecord rec : fr.getCSVParser(false)) {            String genders = rec.get(1);            if  (genders.equals(gender))    {                total += 1;            }        }       for (CSVRecord rec : fr.getCSVParser(false)) {            int numBorn = Integer.parseInt(rec.get(2));            String names = rec.get(0);            String genders = rec.get(1);            if (gender !="M" && gender !="F"){                System.out.println("Enter M or F for gender section");}                else                    if  (total == Rank)    {                        Rank = -1;                    }                    else{                    if  (genders.equals(gender))    {                        Rank += 1;                        if  (names.equals(name))    {                            break;                        }                    }                }                }                int rank = 0;       for (CSVRecord rec : newfr.getCSVParser(false)) {            String genders = rec.get(1);            if  (genders.equals(gender))    {                total += 1;            }        }       for (CSVRecord rec : newfr.getCSVParser(false)) {            int numBorn = Integer.parseInt(rec.get(2));            String names = rec.get(0);            String genders = rec.get(1);            if (gender !="M" && gender !="F"){                System.out.println("Enter M or F for gender section");}                else                   if  (total == rank)    {                        System.out.println("NO NAME");                        break;                    }                    else{                    if  (genders.equals(gender))    {                        rank += 1;                        if  (Rank == rank)    {                            System.out.println(name + " born in " + year + " would be " + names + " if she was born in " + newyear);                            break;                        }                    }                }                }                  }    public void yearOfHighestRank(String name, String gender){        DirectoryResource dr = new DirectoryResource();        int highestRanka = gethighestRank(dr, gender, name);        System.out.println(highestRanka);		for (File f : dr.selectedFiles()) {		    FileResource fr = new FileResource(f);		    int eachRank = geteachRank(fr, name, gender);		    if (eachRank == highestRanka) {		        System.out.println(eachRank);		        System.out.println(highestRanka);		        System.out.println(f);		  }                }        }    public int gethighestRank(DirectoryResource dr, String gender, String name) {        int highestRank = Integer.MAX_VALUE;        for (File f : dr.selectedFiles()) {            FileResource fr = new FileResource(f);            int eachrank =  geteachRank(fr, name, gender);            if (eachrank !=-1){                if(highestRank>eachrank){                    highestRank = eachrank;                }            }        }return highestRank;    }}